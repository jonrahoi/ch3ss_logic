import { Piece, Position } from "./Piece";
export default class Board {
    private pieces;
    private moveCount;
    private piecesTaken;
    private sizeOfBoardX;
    private sizeOfBoardY;
    private sizeOfBoardZ;
    private boardCoordinateMinimum;
    private boardEmptySpace;
    private whiteNotation;
    private blackNotation;
    private pawnNotation;
    private rookNoation;
    private knightNotation;
    private bishopNotation;
    private unicornNotation;
    private queenNotation;
    private kingNotation;
    private static setupBoard;
    setPieces(newPieces: Piece[]): void;
    incrementMoveCount(): void;
    setMoveCount(movesCount: number): void;
    executeMove(a: Position, b: Position): boolean;
    moveIsLegal(movePiece: Piece, b: Position): boolean;
    moveIsLegalIgnoreSpecificPiece(movePiece: Piece, b: Position, pieceToIgnore: Piece): boolean;
    checkForQueening(movePiece: Piece, b: Position): boolean;
    kingInCheckFromPosition(pos: Position): boolean;
    gameIsDrawn(): boolean;
    getWhoseTurn(): string;
    getPieces(): Piece[];
    getPiecesTaken(): Piece[];
    pawnMoveDirectionCorrect(colorOfPawn: string, a: Position, b: Position): boolean;
    deletePieceAtPosition(b: Position): void;
    kingInCheckAtSpace(opponentColor: string, positionKing: Position): boolean;
    getLocationOfKingGivenColor(color: string): Position;
    pieceLocatedAtBool(a: Position): boolean;
    private getPieceLocatedAt;
    spaceOnBoard(a: Position): boolean;
    pieceInWay(a: Position, b: Position): boolean;
    pieceInWayEvenIgnoringPiece(a: Position, b: Position, pieceToIgnore: Piece): boolean;
    getSlope(a: number, b: number): number;
    getAllPossibleMovesPosition(a: Position): Position[];
    private kingTakingPieceAndMovingIntoCheck;
    playerCheckmated(kingColor: string): boolean;
    getSpacesBetweenIncludingEnd(a: Position, b: Position): Position[];
    checkCanBeBlockedWithoutCreatingAnotherCheck(positionKing: Position, positionAttacker: Position, kingColor: string): boolean;
    getMoveCount(): number;
    kingInCheck(colorOfKingToCheckIfInCheck: string): boolean;
    insufficientMaterial(): boolean;
    getBoardStateStringArray(): String[];
    private getPieceNotation;
}
